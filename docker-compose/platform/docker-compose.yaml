version: '3'
services:
    debugger:
        container_name: debugger
        image: panupongdeve/debugger:latest
    kong-database:
        image: bitnami/postgresql:latest
        container_name: kong-database
        environment:
            - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME:-kong}
            - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD:-kong}
            - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE:-kong}
        volumes:
            - ./api-gateway/pg_data:/bitnami/postgresql
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5

    pgadmin:
        container_name: pgadmin_container
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        volumes:
            - ./api-gateway/pgadmin:/var/lib/pgadmin
        ports:
            - "${PGADMIN_PORT:-5050}:80"
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "wget --no-verbose --spider  http://localhost/browser/ || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 5

    kong-migrations:
        depends_on:
            - kong-database
        image: kong:2.5
        command: kong migrations bootstrap
        environment:
            - KONG_PG_HOST=${KONG_PG_HOST:-kong-database}
            - KONG_PG_DATABASE=${POSTGRESQL_DATABASE:-kong}
            - KONG_PG_USER=${POSTGRESQL_USERNAME:-kong}
            - KONG_PG_PASSWORD=${POSTGRESQL_PASSWORD:-kong}
        restart: on-failure

    kong-api-gateway:
        depends_on:
            - kong-database
        image: kong:2.5
        container_name: kong-api-gateway
        environment:
            - TZ=${TZ:-Asia/Bangkok}
            - KONG_DATABASE=postgres
            - KONG_PG_HOST=${KONG_PG_HOST:-kong-database}
            - KONG_PG_DATABASE=${POSTGRESQL_DATABASE:-kong}
            - KONG_PG_USER=${POSTGRESQL_USERNAME:-kong}
            - KONG_PG_PASSWORD=${POSTGRESQL_PASSWORD:-kong}
            - KONG_ADMIN_LISTEN=${KONG_ADMIN_LISTEN:-0.0.0.0:8001}
            - KONG_PROXY_LISTEN=${KONG_PROXY_LISTEN:-0.0.0.0:8000}
            - KONG_PROXY_ERROR_LOG=/dev/stderr
            - KONG_ADMIN_ERROR_LOG=/dev/stderr
            - KONG_TRUSTED_IPS=0.0.0.0/0,::/0
            - KONG_REAL_IP_RECURSIVE=on
            - KONG_HEADERS=off
            - KONG_ROLE=control_plane
            - KONG_CLUSTER_CERT=/etc/kong/cert/cluster.crt
            - KONG_CLUSTER_CERT_KEY=/etc/kong/cert/cluster.key
        volumes:
            - ./api-gateway/kong/cert:/etc/kong/cert
        ports:
            - 8001:8001
        expose: 
            - 8005
        restart: always
        healthcheck:
            test: ["CMD", "kong", "health"]
            interval: 5s
            timeout: 2s
            retries: 15

    kong-api-data-plane:
        depends_on:
            - kong-api-gateway
        image: kong:2.5
        container_name: kong-api-data-plane
        user: $USER
        environment:
            - TZ=${TZ:-Asia/Bangkok}
            - KONG_DATABASE=off
            - KONG_PROXY_LISTEN=${KONG_PROXY_LISTEN:-0.0.0.0:8000}
            - KONG_PROXY_ERROR_LOG=/dev/stderr
            - KONG_ADMIN_ERROR_LOG=/dev/stderr
            - KONG_TRUSTED_IPS=0.0.0.0/0,::/0
            - KONG_REAL_IP_RECURSIVE=on
            - KONG_HEADERS=off
            - KONG_ROLE=data_plane
            - KONG_CLUSTER_CONTROL_PLANE=kong-api-gateway:8005
            - KONG_CLUSTER_CERT=/etc/kong/cert/cluster.crt
            - KONG_CLUSTER_CERT_KEY=/etc/kong/cert/cluster.key
        volumes:
            - ./api-gateway/kong/cert:/etc/kong/cert
            - ./api-gateway/kong/logs:/etc/kong/logs
        ports:
            - 80:8000
        restart: always
        healthcheck:
            test: ["CMD", "kong", "health"]
            interval: 5s
            timeout: 2s
            retries: 15
    konga:
        image: pantsel/konga
        container_name: konga
        environment:
            - NODE_ENV=development
            - DB_ADAPTER=${DB_ADAPTER:-postgres}
            - DB_HOST=${KONG_PG_HOST:-kong-database}
            - DB_DATABASE=${POSTGRESQL_DATABASE:-konga}
            - DB_PORT=5432
            - DB_USER=${POSTGRESQL_USERNAME:-kong}
            - DB_PASSWORD=${POSTGRESQL_PASSWORD:-kong}
            - DB_PG_SCHEMA=public
        ports:
            - 1337:1337
        volumes:
            - ./api-gateway/konga_data:/app/kongadata
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "wget --no-verbose --spider  http://localhost:1337 || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 5

    prometheus:
        image: prom/prometheus
        container_name: prometheus
        ports:
            - 9090:9090
        volumes:
            - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "wget --no-verbose --spider  http://localhost:9090 || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 5

    cadvisor:
        image: gcr.io/cadvisor/cadvisor
        container_name: cadvisor
        privileged: true
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "wget --no-verbose --spider  http://localhost:8080 || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 5
        ports:
            - 9080:8080
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:ro
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
            - /dev/disk/:/dev/disk:ro

    node-exporter:
        image: prom/node-exporter
        container_name: node-exporter
        privileged: true
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "wget --no-verbose --spider  http://localhost:9100 || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 5

    grafana-database:
        image: bitnami/postgresql:latest
        container_name: grafana-database
        environment:
            - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME:-grafana}
            - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD:-grafana}
            - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE:-grafana}
        volumes:
            - ./monitoring/grafana/pg_data:/bitnami/postgresql
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5

    grafana:
        image: grafana/grafana
        container_name: grafana
        depends_on:
            - grafana-database
        restart: always
        volumes:
            - ./monitoring/grafana/grafana_storage:/var/lib/grafana
            - ./monitoring/grafana/grafana_config:/etc/grafana
        ports:
            - 9300:3000

    zookeeper1:
        image: bitnami/zookeeper
        container_name: zookeeper1
        restart: always
        environment:
            - ALLOW_ANONYMOUS_LOGIN=${ALLOW_ANONYMOUS_LOGIN:-yes}
            - ZOO_SERVER_ID=1
            - ZOO_SERVERS=0.0.0.0:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888


    zookeeper2:
        image: bitnami/zookeeper
        container_name: zookeeper2
        depends_on:
            - zookeeper1
        restart: always
        environment:
            - ALLOW_ANONYMOUS_LOGIN=${ALLOW_ANONYMOUS_LOGIN:-yes}
            - ZOO_SERVER_ID=2
            - ZOO_SERVERS=zookeeper1:2888:3888,0.0.0.0:2888:3888,zookeeper3:2888:3888


    zookeeper3:
        image: bitnami/zookeeper
        container_name: zookeeper3
        depends_on:
            - zookeeper1
        restart: always
        environment:
            - ALLOW_ANONYMOUS_LOGIN=${ALLOW_ANONYMOUS_LOGIN:-yes}
            - ZOO_SERVER_ID=3
            - ZOO_SERVERS=zookeeper1:2888:3888,zookeeper2:2888:3888,0.0.0.0:2888:3888,


    kafka1:
        image: bitnami/kafka
        container_name: kafka1
        restart: always
        environment:
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper2:2181
            - ALLOW_PLAINTEXT_LISTENER=yes
    kafka2:
        image: bitnami/kafka
        container_name: kafka2
        restart: always
        environment:
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper2:2181
            - ALLOW_PLAINTEXT_LISTENER=yes

    kafka3:
        image: bitnami/kafka
        container_name: kafka3
        restart: always
        environment:
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper2:2181
            - ALLOW_PLAINTEXT_LISTENER=yes

    kafka-ui:
        image: obsidiandynamics/kafdrop
        container_name: kafka-ui
        restart: always
        environment:
            - KAFKA_BROKERCONNECT=kafka1:9092,kafka2:9092,kafka3:9092
        ports:
            - 4080:9000

